	// i := 5.1
	// fmt.Printf("%v %T", i, i)

	// b := true
	// fmt.Printf("%v %T", b, b)

	// c := complex(3, 4)
	// fmt.Println(c)

	// r, im := real(c), imag(c)
	// fmt.Println(r, im)

	// var firstName *string = new(string)
	// fmt.Println(firstName)
	// //prints <nil>
	// *firstName = "Arthur"
	// fmt.Println(*firstName)
	/*panic: runtime error: invalid memory address or nil pointer dereference
	[signal 0xc0000005 code=0x0 addr=0x0 pc=0x9cc555]*/

	// firstName := "Arthur"
	// fmt.Println(firstName)

	// ptr := &firstName
	// fmt.Println(ptr, &ptr)

	// firstName = "Tricia"
	// fmt.Println(ptr, *ptr)

	// const (
	// 	first = iota + 1
	// 	second
	// )
	// fmt.Println(first, second)

	// var arr [3]int
	// arr[0] = 1
	// arr[1] = 2
	// arr[2] = 3
	// arr := [3]int{1, 2, 3}

	// fmt.Println(arr)

	// arr := [3]int{1, 2, 3}

	// slice := arr[:]
	// arr[1] = 42
	// slice[2] = 27
	// fmt.Println(arr, slice)

	// slice := []int{1, 2, 3}
	// fmt.Println(slice)
	// slice = append(slice, 4, 5, 6)
	// fmt.Println(slice)

	// s2 := slice[1:]
	// s3 := slice[:2]
	// s4 := slice[1:4]

	// fmt.Println(s2, s3, s4)

	// m := map[string]string{"foo": "bar"}
	// m["foo"] = "base"
	// fmt.Println(m["foo"])
	// delete(m, "foo")
	// fmt.Println(m)

	// type user struct {
	// 	name     string
	// 	age      int
	// 	location string
	// }

	// var u user
	// u.name = "sam"
	// u.age = 30
	// u.location = "ruaka"
	// fmt.Println(u)
	// fmt.Println(u.name)

	// u2 := user{
	// 	name:     "ken",
	// 	age:      20,
	// 	location: "ruiru",
	// }
	// fmt.Println(u2)